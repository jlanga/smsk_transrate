ASSEMBLIES = ",".join(
    sorted(
        [config["transcriptomes"][transcriptome]["path"] for transcriptome in config["transcriptomes"]]
    )
)
LEFTS = ",".join(
    sorted(
        expand(
            NORM_DIR + "{sample}_1.fq.gz",
            sample = SAMPLES_PE,
            end = ENDS
        )
    )
)
RIGHTS = ",".join(
    sorted(
        expand(
            NORM_DIR + "{sample}_2.fq.gz",
            sample = SAMPLES_PE,
            end = ENDS
        )
    )
)



rule merge_write_command:
    output:
        script = protected(
            MERGE_DIR + "run_transfuse.sh"
        )
    threads:
        1 # Threads here refers to the threads that will be used in the next step
    params:
        transfuse_threads = config["transfuse_params"]["threads"],
        assemblies = ASSEMBLIES,
        lefts = LEFTS,
        rights = RIGHTS,
        fasta = MERGE_DIR + "merged.fa"
    log:
        MERGE_DIR + "write_command.log"
    benchmark:
        MERGE_DIR + "write_command.json"
    shell:
        "USER_ID=`id -u`; "
        "GROUP_ID=`id -g` ; "
        "echo "
        "\"transfuse "
            "--assemblies {params.assemblies} "
            "--left {params.lefts} "
            "--right {params.rights} "
            "--output `pwd`/{params.fasta} "
            "--threads {params.transfuse_threads} "
            "--verbose ; "
        "mv "
            "all-*.fa "
            "all-*.aln "
            "all-*.clust "
            "*_scores.csv "
            "*_filtered.fa "
            "merged_cons.fa "
            "merged_cons_stats.txt "
            "transrate_*/ "
            "{MERGE_DIR} ; "
        "chown -R $USER_ID:$GROUP_ID {MERGE_DIR} ; \" "
        "> {output.script} "
        "2> {log}"



rule merge_run_command:
    input:
        script = MERGE_DIR + "run_transfuse.sh",
        assemblies = [config["transcriptomes"][transcriptome]["path"] for transcriptome in config["transcriptomes"]],
        lefts = [config["samples_pe"][sample]["forward"] for sample in config["samples_pe"]],
        rights =  [config["samples_pe"][sample]["reverse"] for sample in config["samples_pe"]]
    output:
        fasta = protected(
            MERGE_DIR + "merged.fa"
        )
    log:
        MERGE_DIR + "run_command.log"
    benchmark:
        MERGE_DIR + "run_command.json"
    threads:
        24
    params:
        assemblies = ASSEMBLIES,
        lefts = LEFTS,
        rights = RIGHTS,
    shell:
        "docker run "
            "--rm "
            "--volume `pwd`:`pwd` "
            "--workdir `pwd` "
            "sglim2/transfuse-v0.5.0 "
            "bash {input.script} "
        "> {log} 2>&1"